BlueYonderRequestLambda:
  name: ${self:service}-BlueYonderRequest-${self:provider.stage}
  description: Response to Blue Yonder request for quote
  handler: pricingalgorithm/blueyonder/blueyonderrequest/index.lambda_handler
  layers:
    - {Ref: BlueyonderLambdaLayer}  
  role: BlueYonderRequestExecutionRole
  # logGroup: BlueYonderRequestLogGroup
  package:
    patterns:
      - "!**/*"
      - "pricingalgorithm/blueyonder/blueyonderrequest/**"
      - "pricingalgorithm/libs/**"
  timeout: 60
  runtime: python3.9
  memorySize: 512
  reservedConcurrency: 1
  events:
    - http:
        path: blueyonder/blueyonderrequest
        method: post
        #intergration: lambda
        cors: true
        private: true
        apiKeyRequired: true
        
  environment:
    APPLICATION: ${self:custom.application}
    ENVIRONMENT: ${self:provider.stage}
    PRICING_ALGO_DB_TABLE: !Ref PricingAlgoDynamoDBTable
    IMMUTABLE_ARCHIVE: ${self:custom.application}-${self:provider.stage}-${self:service}-PricingAlgoArchive  #${self:custom.generateImmutableArchiveName}    #
    GREENSCREENS_SECRET: /app/${self:custom.application}/${self:provider.stage}/${self:service}/greenscreens-secret
    DAT_SECRET: /app/${self:custom.application}/${self:provider.stage}/${self:service}/dat-secret
    GOOGLE_API_SECRET: /app/${self:custom.application}/${self:provider.stage}/${self:service}/google-api-secret
    FUEL_API_SECRET: /app/${self:custom.application}/${self:provider.stage}/${self:service}/fuel-api-secret
    BLUE_YONDER_SECRETS: /app/pricing-algo/${self:provider.stage}/pricing-algorithm/blue-yonder-secrets

  tags:
    Application: ${self:custom.application}
    Environment: ${self:provider.stage}
    DeployableUnitName: ${self:service}
    GitHubBranch: ${self:custom.GitHubBranch}
    TechnicalContact: ${self:custom.TechnicalContact}
